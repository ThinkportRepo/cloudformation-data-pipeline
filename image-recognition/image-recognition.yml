AWSTemplateFormatVersion: "2010-09-09"
Description: "image recognition lambda function and s3 result bucket"


Parameters:

  imageRecognitionObject:
    Description: "object to be recognized in images"
    Type: "String"
    Default: "Cat"

  imageRecognitionConfidence:
    Description: "minimum confidence for the recognition algorithm, in percent (> 55)"
    Type: "Number"
    Default: 55
    MinValue: 55
    MaxValue: 100

  imageRecognitionMode:
    Description: "search for images with our without imageRecognitionObject"
    Type: "String"
    Default: "with"
    AllowedValues: 
      - "with"
      - "without"

  appName:
    Description: "your app's name"
    Type: "String"
    Default: "image-recognition"

  environment:
    Description: "your app's current environment"
    Type: "String"
    Default: "dev"

  codeBucketName:
    Description: "s3 bucket that contains your lambda code"
    Type: "String"
    Default: "workshop-dev-123456789--code"

  codeKey:
    Description: "name of the lambda code zip file"
    Type: "String"
    Default: "image-recognition_lambda.py.zip"

  sourceBucketName:
    Description: "source s3 bucket"
    Type: "String"
    Default: "workshop-dev-123456789--rawdata"

  codeRuntime:
    Description: "runtime of your lambda function"
    Type: "String"
    Default: "python3.7"
    AllowedValues:
      - "dotnetcore2.1"
      - "dotnetcore3.1"
      - "go1.x"
      - "java11"
      - "java8"
      - "nodejs10.x"
      - "nodejs12.x"
      - "provided"
      - "python2.7"
      - "python3.6"
      - "python3.7"
      - "python3.8"
      - "ruby2.5"
      - "ruby2.7"


Resources:

  sourceBucketPermission:
    Description: "necessary permissions to run lambda function off source bucket triggers"
    Type: "AWS::Lambda::Permission"
    DependsOn: "imageRecognitionFunction"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Sub "${appName}-${environment}--function"
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${sourceBucketName}"

  resultBucket:
    Description: "s3 bucket where images with/without imageRecognitionObject are copied"
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${appName}-${environment}-${AWS::AccountId}--result"

  imageRecognitionFunction:
    Description: "lambda function that recognizes objects and copies images"
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${appName}-${environment}--function"
      Description: "image recognition lambda function"
      Handler: "image-recognition_lambda.lambda_handler"
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: !Ref "codeRuntime"
      Timeout: 10
      Code:
        S3Bucket: !Ref "codeBucketName"
        S3Key: !Ref "codeKey"
      Environment:
        Variables:
          resultBucketNameVar: !Sub "${appName}-${environment}-${AWS::AccountId}--result"
          recognitionObject: !Ref "imageRecognitionObject"
          recognitionConfidence: !Ref "imageRecognitionConfidence"
          recognitionMode: !Ref "imageRecognitionMode"

  lambdaIAMRole:
    Description: "permissions for lambda function"
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${appName}-${environment}--function:*"
              - Action:
                  - "s3:*"
                Effect: "Allow"
                Resource: "*"
              - Action:
                  - "rekognition:*"
                Effect: "Allow"
                Resource: "*"
          PolicyName: "lambda"

  lambdaLogGroup:
    Description: "log group for lambda function"
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${appName}-${environment}--function"
      RetentionInDays: 90